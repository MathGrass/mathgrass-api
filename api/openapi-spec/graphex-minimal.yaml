swagger: "2.0"
info:
  description: "This is the MathGrass server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger MathGrass"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "mathgrass.swagger.io"
basePath: "/v2"

schemes:
  - "https"
  - "http"
paths:
  # GRAPH
  /graph/{graphId}:
    get:
      description: "Get a graph by id"
      operationId: "getGraphById"
      parameters:
        - name: "graphId"
          in: "path"
          description: "Graph id"
          required: true
          type: "integer"
          format: int64
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Graph"
    put:
      description: "Update a graph"
      operationId: "updateGraph"
      consumes:
        - "application/json"
      parameters:
        - name: "graphId"
          in: "path"
          description: "ID of graph"
          required: true
          type: "integer"
          format: int64
        - name: "graph"
          in: "body"
          description: "Graph object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Graph"
      responses:
        "200":
          description: "successful operation"
  
  /graph:
    post:
      description: "Create a new graph"
      operationId: "createGraph"
      parameters:
        - name: "graph"
          in: "body"
          description: "Graph object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Graph"
      consumes:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "integer"
            format: int64


  # TASK TEMPLATE
  /taskTemplate/{taskTemplateId}:
    get:
      description: "Returns a task template"
      operationId: "getTaskTemplateById"
      produces:
        - "application/json"
      parameters:
        - name: "taskTemplateId"
          in: "path"
          description: "ID of task template"
          required: true
          type: "integer"
          format: int64
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: '#/definitions/TaskTemplate'
        "404":
          description: "Task Template not found"

  # TASK TEMPLATE
  /taskTemplate/{taskTemplateId}/getHint/{index}:
    get:
      description: "Returns a hint"
      operationId: "getTaskTemplateHint"
      produces:
        - "application/json"
      parameters:
        - name: "taskTemplateId"
          in: "path"
          description: "ID of task template"
          required: true
          type: "integer"
          format: int64
        - name: "index"
          in: "path"
          description: "Index of the hint"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: '#/definitions/TaskHint'
        "404":
          description: "Task Template not found"


  /taskTemplate:
    post:
      description: "Creates a task template"
      operationId: "createTaskTemplate"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "taskTemplate"
          description: ""
          required: true
          schema:
            $ref: "#/definitions/TaskTemplate"

      responses:
        "200":
          description: "successful operation"
          schema:
            type: "integer"
            format: int64

  /taskTemplate/{taskTemplateId}/setLabel:
    put:
      description: "Sets a label for a task template"
      operationId: "setTaskTemplateLabel"
      parameters:
        - name: "taskTemplateId"
          in: "path"
          description: "ID of task template"
          required: true
          type: "integer"
          format: int64
        - name: "label"
          in: "body"
          description: "Label to set"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "successful operation"

  /taskTemplate/{taskTemplateId}/setQuestion:
    put:
      description: "Sets a question for a task template"
      operationId: "setTaskTemplateQuestion"
      parameters:
        - in: "path"
          name: "taskTemplateId"
          description: "ID of task template"
          required: true
          type: "integer"
          format: int64
        - name: "question"
          in: "body"
          description: "Question to set"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "successful operation"


  # TASK
  /task/{taskId}:
    get:
      description: "Returns a task"
      operationId: "getTaskById"
      produces:
        - "application/json"
      parameters:
        - name: "taskId"
          in: "path"
          description: "ID of task"
          required: true
          type: "integer"
          format: int64
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
    
    put:
      description: "Updates a task"
      operationId: "updateTask"
      consumes:
        - "application/json"
      parameters:
        - name: "taskId"
          in: "path"
          type: integer
          format: int64
          required: true
        - name: "task"
          in: "body"
          description: "ID of task"
          required: true
          schema:
            $ref: "#/definitions/Task"
      responses:
        "200":
          description: "successful operation"

  /task:
    post:
      description: "Creates a task"
      operationId: "createTask"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "task"
          description: ""
          required: true
          schema:
            $ref: "#/definitions/Task"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "integer"
            format: int64


    get:
      description: "Get the IDs of all tasks"
      operationId: "getIdsOfAllTasks"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TaskIdLabelTuple"


  /task/{taskId}/addFeedback:
    post:
      description: "Adds feedback to a task"
      operationId: "addTaskFeedback"
      consumes:
        - "application/json"
      parameters:
        - name: "taskId"
          in: "path"
          description: "ID of task"
          required: true
          type: "integer"
          format: int64
        - name: "feedback"
          in: "body"
          description: "feedback content"
          required: true
          schema:
            $ref: "#/definitions/Feedback"

      responses:
        "200":
          description: "successful operation"


  /task/{taskId}/getFeedback:
    get:
      description: "Get all feedback of a task"
      operationId: "getTaskFeedback"
      produces:
        - "application/json"
      parameters:
        - name: "taskId"
          in: "path"
          description: "ID of task"
          required: true
          type: "integer"
          format: int64


      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Feedback"



  /task/{taskId}/addHint:
    post:
      description: "Adds a hint to a task"
      operationId: "addTaskHint"
      consumes:
        - "application/json"
      parameters:
        - name: "taskId"
          in: "path"
          description: "ID of task"
          required: true
          type: "integer"
          format: int64
        - name: "hint"
          in: "body"
          description: "hint item"
          required: true
          schema:
            $ref: "#/definitions/TaskHint"

      responses:
        "200":
          description: "successful operation"


  # TASK COLLECTION
  /taskCollection:
    post:
      description: "Creates a task collection"
      operationId: "createTaskCollection"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "taskCollection"
          description: ""
          required: true
          schema:
            $ref: "#/definitions/TaskCollection"
      responses:
        "200":
          description: "successful operation"

    get:
      description: "Get all task collection"
      operationId: "getTaskCollections"
      produces:
        - "application/json"

      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TaskCollection"

  /taskCollection/{taskCollectionId}:
    get:
      description: "Returns a task collection"
      operationId: "getTaskCollectionById"
      produces:
        - "application/json"
      parameters:
        - name: "taskCollectionId"
          in: "path"
          description: "ID of task collection"
          required: true
          type: "integer"
          format: int64
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: '#/definitions/TaskCollection'

  # TASK TOPIC
  /taskTopic:
    post:
      description: "Creates a task topic"
      operationId: "createTaskTopic"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "taskTopic"
          description: ""
          required: true
          schema:
            $ref: "#/definitions/TaskTopic"
      responses:
        "200":
          description: "successful operation"

    get:
      description: "Get all task topics"
      operationId: "getTaskTopics"
      produces:
        - "application/json"

      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TaskTopic"



  # TASK SOLVER    
  
  /taskSolver/{taskSolverId}:
    get:
      description: "Returns a task solver"
      operationId: "getTaskSolverById"
      produces:
        - "application/json"
      parameters:
        - name: "taskSolverId"
          in: "path"
          description: "ID of task solver"
          required: true
          type: "integer"
          format: int64
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: '#/definitions/TaskSolver'

  /taskSolver:
    post:
      description: "Creates a task solver"
      operationId: "createTaskSolver"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "taskSolver"
          description: ""
          required: true
          schema:
            $ref: "#/definitions/TaskSolver"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "integer"
            format: int64




  # TAG
  /tag/{tagId}:
    get:
      description: "Returns a tag"
      operationId: "getTagById"
      produces:
        - "application/json"
      parameters:
        - name: "tagId"
          in: "path"
          type: integer
          format: int64
          description: "ID of tag"
          required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: '#/definitions/Tag'

  /tag:
    post:
      description: "Creates a tag"
      operationId: "createTag"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "tag"
          description: ""
          required: true
          schema:
            $ref: "#/definitions/Tag"
      responses:
        "200":
          description: "successful operation"

    get:
      description: "Get all tags"
      operationId: "getTags"
      produces:
        - "application/json"


      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tag"


  /evaluator/runTask/{taskId}:
    post:
      description: "Run a task with an answer"
      operationId: "runTask"
      parameters:
        - name: "taskId"
          in: "path"
          description: "ID of task"
          required: true
          type: "integer"
          format: int64
        - name: "answer"
          in: "body"
          description: "Answer of student"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "integer"
            format: int64

  /evaluator/taskResult/{resultId}:
    get:
      description: "Get the result for an evaluation process"
      operationId: "getTaskResult"
      produces:
        - "application/json"
      parameters:
        - name: "resultId"
          in: "path"
          description: "ID of task"
          required: true
          type: "integer"
          format: int64
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: '#/definitions/TaskResult'



securityDefinitions:
  mathgrass_auth:
    type: "oauth2"
    authorizationUrl: "http://mathgrass.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:exercising: "modify entities of exercising"
      read:exercising: "read exercising"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

definitions:
  Graph:
    type: "object"
    properties:
      id:
        type: "integer"
        format: int64

      label:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      
      edges:
        type: "array"
        items:
          title: "Edge"
          type: "object"
          properties:
            firstVertex:
              $ref: "#/definitions/Vertex"
            secondVertex:
              $ref: "#/definitions/Vertex"
            label:
              type: "string"
          required:
            - firstVertexId
            - secondVertexId

      vertices:
        type: "array"
        items:
          title: "Vertex"
          type: "object"
          properties:
            id:
              type: "integer"
              format: int64
            x:
              type: "integer"
              minimum: 0
              maximum: 100
              format: int32
            y:
              type: "integer"
              minimum: 0
              maximum: 100
              format: int32
            label:
              type: "string"
          required:
            - x
            - y

  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: int64
      label:
        type: "string"

  Question:
    type: "object"
    properties:
      question:
        type: "string"
      questionType:
        type: "string"
        enum:
          - "freetext"
          - "number"
          - "mark_nodes"
          - "mark_edges"
      possible_answers:
        type: "array"
        items:
          type: "string"

  TaskSolver:
    type: "object"
    properties:
      id:
        type: "integer"
        format: int64
      label:
        type: "string"
      executionDescriptor:
        type: "string"
  TaskTemplate:
    type: "object"
    properties:
      id:
        type: "integer"
        format: int64
      label:
        type: "string"
      question:
        type: "string"
      taskSolver:
        type: "integer"
        format: int64
      hints:
        x-nullable: true
        type: "array"
        items:
          $ref: "#/definitions/TaskHint"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
  Task:
    type: "object"
    properties:
      id:
        type: "integer"
        format: int64
      template:
        $ref: "#/definitions/TaskTemplate"
      graph:
        $ref: "#/definitions/Graph"
      hints:
        x-nullable: true
        type: "array"
        items:
          $ref: "#/definitions/TaskHint"
      feedback:
        type: "array"
        items:
          type: "integer"
          format: int64
      question:
        type: "string"
      label:
        type: "string"
      answer:
        type: "string"

  TaskIdLabelTuple:
    type: "object"
    properties:
      id:
        type: "integer"
        format: int64
      label:
        type: "string"

  TaskHint:
    type: "object"
    properties:
      id:
        type: "integer"
        format: int64
      label:
        type: "string"
      content:
        type: "string"

  TaskResult:
    type: "object"
    properties:
      id:
        type: "integer"
        format: int64
      task:
        type: "integer"
        format: int64
      answer:
        type: "string"
      submissionDate:
        type: "string"
      evaluationDate:
        type: "string"
      answerTrue:
        type: "boolean"


  Feedback:
    type: "object"
    properties:
      id:
        type: "integer"
        format: int64
      content:
        type: "string"
  
  TaskTopic:
    type: "object"
    properties:
      id:
        type: "integer"
        format: int64
      label: 
        type: "string"
      tasks:
        type: "array"
        items:
          type: "integer"
          format: int64

  TaskCollection:
    type: "object"
    properties:
      id:
        type: "integer"
        format: int64
      label:
        type: "string"
      tasks:
        type: "array"
        items:
          type: "integer"
          format: int64


externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"